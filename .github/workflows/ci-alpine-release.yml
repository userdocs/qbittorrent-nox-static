name: ci - alpine-release

on:
  workflow_call:
    inputs:
      distinct_id:
        description: "Distinct ID for the artifacts"
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        qbt_libtorrent_version: ["1.2", "2.0"]
        include:
          - qbt_libtorrent_version: "1.2"
            preview_release: true

          - qbt_libtorrent_version: "2.0"
            preview_release: false

    name: "Publish release libtorrent-v${{ matrix.qbt_libtorrent_version }}"

    env:
      qbt_build_dir: "qbt-build"

    steps:
      - name: Checkout ${{ inputs.distinct_id }}
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Pandoc - Bootstrap
        run: |
          pandoc_git_tag="$(git ls-remote -q -t --refs https://github.com/jgm/pandoc.git | awk '/tags\/[0-9]/{sub("refs/tags/", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          curl -sLo- "https://github.com/jgm/pandoc/releases/latest/download/pandoc-${pandoc_git_tag}-linux-$(dpkg --print-architecture).tar.gz" | tar xzf - --strip-components 2 -C "$(pwd)" --exclude="share"

      - name: Host - Download 1.2 qbittorrent-nox artifacts ${{ inputs.distinct_id }}
        uses: actions/download-artifact@v5
        with:
          path: "1.2"
          pattern: libtorrent-v1.2-*-qbittorrent-nox
          merge-multiple: true

      - name: Host - Download 2.0 qbittorrent-nox artifacts ${{ inputs.distinct_id }}
        uses: actions/download-artifact@v5
        with:
          path: "2.0"
          pattern: libtorrent-v2.0-*-qbittorrent-nox
          merge-multiple: true

      - name: Host - merge release-info ${{ inputs.distinct_id }}
        run: |
          if [[ ${{ matrix.qbt_libtorrent_version }} == "1.2" ]]; then
            for release in 1\.2/*-release.md; do
              [[ -f "${release}" ]] && release+=("${release}")
            done
            revision="$(jq -r .revision 1\.2/*-dependency-version.json | head -n1)"
            boost="$(jq -r .boost 1\.2/*-dependency-version.json | head -n1)"
          fi

          if [[ ${{ matrix.qbt_libtorrent_version }} == "2.0" ]]; then
            for release in 2\.0/*-release.md; do
              [[ -f "${release}" ]] && release+=("${release}")
            done
            revision="$(jq -r .revision 2\.0/*-dependency-version.json | head -n1)"
            boost="$(jq -r .boost 2\.0/*-dependency-version.json | head -n1)"
          fi

          readarray -t release_sorted < <(printf '%s\n' "${release[@]}" | sort)

          for dependency_version_files in 1\.2/*-dependency-version.json 2\.0/*-dependency-version.json; do
            if [[ -f "${dependency_version_files}" ]]; then
                sed -r 's/"boost": (.*)/BOOST_PLACEHOLDER/g' -i "${dependency_version_files}"
                sed -r 's/"revision": (.*)/REVISION_PLACEHOLDER/g' -i "${dependency_version_files}"
                dependency_version+=("${dependency_version_files}")
            fi
          done

          readarray -t dependency_version_sorted < <(printf '%s\n' "${dependency_version[@]}" | sort)

          paste -d '\n' "${release_sorted[@]}" | uniq | awk '!(NF && seen[$0]++) || /^>/' > "tmp-release.md"
          paste -d '\n' "${dependency_version_sorted[@]}" | uniq | awk '!(NF && seen[$0]++)' > "dependency-version.json"

          sed -i "s|BOOST_PLACEHOLDER|\"boost\": \"${boost}\",|" dependency-version.json
          sed -i "s|REVISION_PLACEHOLDER|\"revision\": \"${revision}\"|" dependency-version.json

          ./pandoc --wrap=preserve -f gfm tmp-release.md -t gfm -o release.md

      - name: Host - Bootstrap release tag ${{ inputs.distinct_id }}
        run: printf '%s\n' "release_tag=$(cat ${{ matrix.qbt_libtorrent_version }}/tag.md)" >> $GITHUB_ENV

      - name: Host - Bootstrap release title ${{ inputs.distinct_id }}
        run: printf '%s\n' "release_title=$(cat ${{ matrix.qbt_libtorrent_version }}/title.md)" >> $GITHUB_ENV

      - name: Host- Create release - tag - assets ${{ inputs.distinct_id }}
        uses: ncipollo/release-action@v1
        with:
          prerelease: "${{ matrix.preview_release }}"
          artifacts: "${{ matrix.qbt_libtorrent_version }}/*-qbittorrent-nox,dependency-version.json"
          replacesArtifacts: true
          tag: "${{ env.release_tag }}"
          name: "${{ env.release_title }}"
          bodyFile: "release.md"
          allowUpdates: true
          token: "${{ github.TOKEN }}"
