# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition
name: matrix multi build and release customs tags

on:
  - workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os_id: [alpine]
        os_version_id: [edge]
        arch_type: [x86_64, armhf, armv7, aarch64]
        libtorrent_version: ["1.2", "2.0"]
        icu_step_name: [icu skipped, icu]
        build_tool: ["", cmake]
        qbittorrent_tag: ["-qt release-4.3.9"]
        include:
          - build_tool: "cmake"
            build_tool_name: "cmake-"

          - libtorrent_version: "2.0"
            libtorrent_tag: -lt v2.0.4
            preview_release: true

          - libtorrent_version: "1.2"
            libtorrent_tag: -lt v1.2.14
            preview_release: false

          - icu_step_name: icu
            icu_matrix_name: icu-
            qt_with_icu: -i
            with_icu: bash qbittorrent-nox-static.sh icu

    name: "${{ matrix.arch_type }}-${{ matrix.build_tool_name }}${{ matrix.icu_matrix_name }}libtorrent-v${{ matrix.libtorrent_version }}"

    env:
      build_dir: "qbt-build"
      name: "${{ matrix.arch_type }}-${{ matrix.build_tool_name }}${{ matrix.icu_matrix_name }}libtorrent-v${{ matrix.libtorrent_version }}"

    steps:
      - uses: actions/checkout@v2.4.0

      - name: Host - update
        run: sudo apt-get update

      - name: Host - upgrade
        run: sudo apt-get -y upgrade

      - name: Host - Install host qemu-static
        run: sudo apt-get install -y qemu binfmt-support qemu-user-static

      - name: Host - Docker multiarch bootstrap
        run: sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Host - Create Docker template env file
        run: |
          echo "qbt_build_tool=${{ matrix.build_tool }}" > env.custom
          echo "qbt_cross_name=${{ matrix.arch_type  }}" >> env.custom
          echo "libtorrent_version=${{ matrix.libtorrent_version }}" >> env.custom

      - name: Host - Create docker multiarch container
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker - apk update
        run: docker exec -w /root multiarch apk update

      - name: Docker - apk install bash
        run: docker exec -w /root multiarch apk add bash

      - name: Docker - Bootstrap
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh -bs-a

      - name: Host - Bootstrap release tag
        run: echo "release_tag=$(cat ${{ env.build_dir }}/release_info/tag.md)" >> $GITHUB_ENV

      - name: Host - Bootstrap release title
        run: echo "release_title=$(cat ${{ env.build_dir }}/release_info/title.md)" >> $GITHUB_ENV

      - name: Docker - libexecinfo
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh libexecinfo

      - name: Docker - zlib-ng
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh zlib

      - name: Docker - iconv
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh iconv

      - name: Docker - ${{ matrix.icu_step_name }}
        if: matrix.icu_step_name == 'icu'
        run: docker exec -w /root multiarch ${{ matrix.with_icu }}

      - name: Docker - openssl
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh openssl

      - name: Docker - boost
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh boost

      - name: Docker - libtorrent
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh libtorrent ${{ matrix.libtorrent_tag }}

      - name: Docker - qtbase ${{ matrix.qt_with_icu }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qtbase ${{ matrix.qt_with_icu }}

      - name: Docker - qttools
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qttools

      - name: Docker - qbittorrent
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qbittorrent ${{ matrix.qbittorrent_tag }}

      - name: Docker - "Set release asset name"
        run: docker exec -w /root/${{ env.build_dir }}/completed multiarch mv -f qbittorrent-nox ${{ matrix.arch_type }}-${{ matrix.build_tool_name }}${{ matrix.icu_matrix_name }}qbittorrent-nox

      - name: Host- Create release - tag - assets
        uses: ncipollo/release-action@v1.9.0
        with:
          prerelease: ${{ matrix.preview_release }}
          artifacts: ${{ env.build_dir }}/completed/${{ matrix.arch_type }}-${{ matrix.build_tool_name }}${{ matrix.icu_matrix_name }}qbittorrent-nox
          replacesArtifacts: true
          tag: ${{ env.release_tag }}
          name: ${{ env.release_title }}
          bodyFile: ${{ env.build_dir }}/release_info/release.md
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive code coverage results
        if: matrix.build_tool == 'cmake'
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ env.name }}-graphs
          path: ${{ env.build_dir }}/completed/*.png
