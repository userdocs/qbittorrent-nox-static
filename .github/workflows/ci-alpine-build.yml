name: ci - alpine build

on:
  workflow_call:
    inputs:
      distinct_id:
        description: "Distinct id"
        required: false
        type: string
      workflow-files:
        description: "Alpine: workflow-files files"
        required: true
        type: string
      icu:
        description: "enable icu"
        required: true
        type: string
      debug:
        description: "debug builds"
        required: true
        type: string
      script_name:
        description: "script name"
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        runs_on: ["ubuntu-24.04-arm"]
        os_id: [alpine]
        os_version_id: [edge]
        qbt_cross_name: ["armhf", "armv7", "aarch64", "riscv64", "x86_64", "x86"]
        qbt_libtorrent_version: ["1.2", "2.0"]
        qbt_build_tool: [""]
        qbt_qbittorrent_tag: [""]
        include:
          - qbt_build_tool: ""
            qbt_qt_version_name: ""

    name: "${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}libtorrent-v${{ matrix.qbt_libtorrent_version }}"

    env:
      qbt_build_dir: "qbt-build"
      container_name: "multiarch"
      script_name: ${{ inputs.script_name }}
      set_skip_icu: ${{ inputs.icu }}
      set_workflow_files: ${{ inputs.workflow-files }}
      set_build_debug: ${{ inputs.debug }}
      set_qbt_mcm_url: "" # default is userdocs/qbt-musl-cross-make
      set_qbt_with_qemu: "" # default is yes
      set_qbt_host_deps: "" # default is no
      set_qbt_host_deps_repo: "" # default is userdocs/qbt-host-deps

    steps:
      - name: Checkout ${{ inputs.distinct_id }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Download ${{ env.script_name }}
        run: |
          # Make sure the branch is set to master for qbittorrent-nox-static and main qbittorrent-nox-static-test
          if [[ ! -f "${script_name}" ]]; then
            echo "Downloading ${script_name} from userdocs/qbittorrent-nox-static"
            curl -LO "https://raw.githubusercontent.com/userdocs/qbittorrent-nox-static/refs/heads/master/${script_name}"
            chmod +x "${script_name}"
          fi

      - name: Host - Create Docker template env file ${{ inputs.distinct_id }}
        run: |
          printf '%s\n' "qbt_revision_url=${{ github.repository }}" > env.custom
          printf '%s\n' "qbt_zlib_type=zlib" >> env.custom
          printf '%s\n' "qbt_skip_icu=${set_skip_icu}" >> env.custom
          printf '%s\n' "qbt_boost_tag=${{ matrix.qbt_boost_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_version=${{ matrix.qbt_libtorrent_version }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_tag=${{ matrix.qbt_libtorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_master_jamfile=" >> env.custom
          printf '%s\n' "qbt_qt_version=${{ matrix.qbt_qt_version }}" >> env.custom
          printf '%s\n' "qbt_qt_tag=${{ matrix.qbt_qt_tag }}" >> env.custom
          printf '%s\n' "qbt_qbittorrent_tag=${{ matrix.qbt_qbittorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_build_dir=${qbt_build_dir}" >> env.custom
          printf '%s\n' "qbt_build_tool=${{ matrix.qbt_build_tool }}" >> env.custom
          printf '%s\n' "qbt_cross_name=${{ matrix.qbt_cross_name }}" >> env.custom
          printf '%s\n' "qbt_mcm_url=${set_qbt_mcm_url}" >> env.custom
          printf '%s\n' "qbt_patches_url=${{ github.repository }}" >> env.custom
          printf '%s\n' "qbt_workflow_files=${set_workflow_files}" >> env.custom
          printf '%s\n' "qbt_cache_dir=" >> env.custom
          printf '%s\n' "qbt_optimise_strip=" >> env.custom
          printf '%s\n' "qbt_build_debug=${set_build_debug}" >> env.custom
          printf '%s\n' "qbt_standard=" >> env.custom
          printf '%s\n' "qbt_static_ish=" >> env.custom
          printf '%s\n' "qbt_optimise=${qbt_optimise}" >> env.custom
          printf '%s\n' "qbt_with_qemu=${set_qbt_with_qemu}" >> env.custom
          printf '%s\n' "qbt_host_deps=${set_qbt_host_deps}" >> env.custom
          printf '%s\n\n' "qbt_host_deps_repo=${set_qbt_host_deps_repo}" >> env.custom

      - name: Host - Debian based specific env ${{ inputs.distinct_id }}
        if : matrix.os_id != 'alpine'
        run: |
          printf '%s\n' "LANG=C.UTF-8" >> env.custom
          printf '%s\n' "LC_ALL=C.UTF-8" >> env.custom
          printf '%s\n\n' "DEBIAN_FRONTEND=noninteractive" >> env.custom

      - name: Host - Bootstrap qemu
        uses: userdocs/actions/qemu@e74d179578ddcf1cd07cd9eefd0915f33a3bd600 # v1.0.1

      - uses: userdocs/actions/qbt_docker@e74d179578ddcf1cd07cd9eefd0915f33a3bd600 # v1.0.1
        with:
            # if the env.custom file exists, it will be used to pass environment
            distinct_id: ${{ inputs.distinct_id }}
            use_host_env: "false"
            container_name: ${{ env.container_name }}
            os_id: ${{ matrix.os_id }}
            os_version_id: ${{ matrix.os_version_id }}
            custom_docker_commands: ""
            additional_alpine_apps: "bash curl git"
            additional_debian_apps: "bash curl git"

      - name: Host - patches ${{ inputs.distinct_id }}
        if: hashFiles('patches/**') != ''
        run: mkdir -p ${qbt_build_dir}/patches && cp -rf patches/* ${qbt_build_dir}/patches/

      - name: Docker - bootstrap_deps ${{ inputs.distinct_id }}
        if: inputs.script_name == 'qbt-nox-static.bash'
        run: docker exec -u gh:gh ${container_name} bash ${script_name} bootstrap_deps

      - name: Docker - Bootstrap build ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} -bs-a

      - name: Docker - glibc ${{ inputs.distinct_id }}
        if : matrix.os_id != 'alpine'
        run: docker exec -u gh:gh ${container_name} bash ${script_name} glibc

      - name: Docker - zlib ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} zlib

      - name: Docker - iconv ${{ inputs.distinct_id }}
        if: matrix.qbt_libtorrent_version == '1.2'
        run: docker exec -u gh:gh ${container_name} bash ${script_name} iconv

      - name: Docker - icu ${{ inputs.distinct_id }}
        if: env.set_skip_icu == 'no'
        run: docker exec -u gh:gh ${container_name} bash ${script_name} icu

      - name: Docker - openssl ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} openssl

      - name: Docker - boost ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} boost

      - name: Docker - libtorrent ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} libtorrent

      - name: Docker - double_conversion ${{ inputs.distinct_id }}
        if: matrix.qbt_build_tool == ''
        run: docker exec -u gh:gh ${container_name} bash ${script_name} double_conversion

      - name: Docker - qtbase ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} qtbase

      - name: Docker - qttools ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} qttools

      - name: Docker - qbittorrent ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh ${container_name} bash ${script_name} qbittorrent

      - name: Docker - Set release asset name ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh -w /home/gh/${qbt_build_dir}/completed ${container_name} mv -f qbittorrent-nox ${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox

      - name: Generate artifact attestation  ${{ inputs.distinct_id }}
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-path: "${{ env.qbt_build_dir }}/completed/${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox"

      - name: Docker - Release Info ${{ inputs.distinct_id }}
        run: docker exec -u gh:gh -w /home/gh/${qbt_build_dir}/release_info ${container_name} bash -c 'mv *.md *.json '/home/gh/${qbt_build_dir}/completed''

      - name: Host - Upload libtorrent-v${{ matrix.qbt_libtorrent_version }}-qbittorrent-nox and release info artifact ${{ inputs.distinct_id }}
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: libtorrent-v${{ matrix.qbt_libtorrent_version }}-${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox
          path: |
            ${{ env.qbt_build_dir }}/completed/*
            !${{ env.qbt_build_dir }}/completed/*.png

      - name: Host - Upload cmake graphs artifact ${{ inputs.distinct_id }}
        if: success() && matrix.qbt_build_tool == ''
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.qbt_cross_name }}-libtorrent-v${{ matrix.qbt_libtorrent_version }}-graphs"
          path: "${{ env.qbt_build_dir }}/completed/*.png"

      # - name: Host - Upload build dir on error or cancel
      #   if: ( cancelled() || failure() )
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: "${{ matrix.qbt_cross_name }}-libtorrent-v${{ matrix.qbt_libtorrent_version }}-logs"
      #     path: "${{ env.qbt_build_dir }}"
